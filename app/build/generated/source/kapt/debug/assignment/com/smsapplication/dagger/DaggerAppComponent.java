// Generated by Dagger (https://dagger.dev).
package assignment.com.smsapplication.dagger;

import android.content.Context;
import assignment.com.smsapplication.SmsApp;
import assignment.com.smsapplication.sms.presenter.SmsPresenter;
import assignment.com.smsapplication.sms.view.SmsActivity;
import assignment.com.smsapplication.sms.view.SmsActivity_MembersInjector;
import assignment.com.smsapplication.utils.SmsRepository;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerAppComponent implements AppComponent {
  private Provider<Context> provideContextProvider;

  private Provider<SmsRepository> provideSmsAPIProvider;

  private Provider<SmsPresenter> providePresenterProvider;

  private DaggerAppComponent(AppModule appModuleParam, PresenterModule presenterModuleParam) {

    initialize(appModuleParam, presenterModuleParam);
  }

  public static Builder builder() {
    return new Builder();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final AppModule appModuleParam,
      final PresenterModule presenterModuleParam) {
    this.provideContextProvider = DoubleCheck.provider(AppModule_ProvideContextFactory.create(appModuleParam));
    this.provideSmsAPIProvider = DoubleCheck.provider(PresenterModule_ProvideSmsAPIFactory.create(presenterModuleParam, provideContextProvider));
    this.providePresenterProvider = DoubleCheck.provider(PresenterModule_ProvidePresenterFactory.create(presenterModuleParam, provideSmsAPIProvider));
  }

  @Override
  public void inject(SmsApp smsApp) {
  }

  @Override
  public void inject(SmsActivity smsActivity) {
    injectSmsActivity(smsActivity);}

  private SmsActivity injectSmsActivity(SmsActivity instance) {
    SmsActivity_MembersInjector.injectSmsPresenter(instance, providePresenterProvider.get());
    return instance;
  }

  public static final class Builder {
    private AppModule appModule;

    private PresenterModule presenterModule;

    private Builder() {
    }

    public Builder appModule(AppModule appModule) {
      this.appModule = Preconditions.checkNotNull(appModule);
      return this;
    }

    public Builder presenterModule(PresenterModule presenterModule) {
      this.presenterModule = Preconditions.checkNotNull(presenterModule);
      return this;
    }

    public AppComponent build() {
      Preconditions.checkBuilderRequirement(appModule, AppModule.class);
      if (presenterModule == null) {
        this.presenterModule = new PresenterModule();
      }
      return new DaggerAppComponent(appModule, presenterModule);
    }
  }
}
